service: my-auth-backend

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-west-2
  stage: ${opt:stage, 'dev'}
  environment:
    USER_JWT_SECRET_NAME: ${self:custom.jwtSecretName}
    USERS_TABLE_NAME: ${self:custom.usersTableName}
    OFFICES_TABLE_NAME: ${self:custom.officesTableName}
    OFFICE_MEMBERSHIPS_TABLE_NAME: ${self:custom.officeMembershipsTableName}
    VERIFICATION_EMAIL_FROM: "ben.churchill98@gmail.com"
    OFFICES_S3_BUCKET_NAME: ${self:custom.officesS3BucketName}
    OFFICE_BOOKINGS_ATENDEES_TABLE_NAME: ${self:custom.officeBookingsAttendeesTableName}
    OFFICE_BOOKINGS_TABLE_NAME: ${self:custom.officeBookingsTableName}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:UpdateItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.usersTableName}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.officesTableName}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.officeMembershipsTableName}
        - Effect: "Allow"
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - arn:aws:secretsmanager:${self:provider.region}:*:secret:${self:custom.jwtSecretName}-*
        - Effect: "Allow"
          Action:
            - secretsmanager:GetSecretValue
            - secretsmanager:CreateSecret
            - secretsmanager:PutSecretValue
            - secretsmanager:DescribeSecret
          Resource: "*"
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource:
            - arn:aws:ses:${self:provider.region}:*:identity/${self:provider.environment.VERIFICATION_EMAIL_FROM}
        - Effect: "Allow"
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:ListBucket
            - s3:CreateBucket
          Resource:
            - arn:aws:s3:::${self:custom.officesS3BucketName}
            - arn:aws:s3:::${self:custom.officesS3BucketName}/*

custom:
  usersTableName: ${self:service}-users-${self:provider.stage}
  jwtSecretName: ${self:service}-jwt-${self:provider.stage}
  officesTableName: ${self:service}-offices-${self:provider.stage}
  officeMembershipsTableName: ${self:service}-office-memberships-${self:provider.stage}
  officesS3BucketName: ${self:service}-offices-${self:provider.stage}
  officeBookingsAttendeesTableName: ${self:service}-office-bookings-attendees-${self:provider.stage}
  officeBookingsTableName: ${self:service}-office-bookings-${self:provider.stage}

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    OfficesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.officesTableName}
        AttributeDefinitions:
          - AttributeName: officeId
            AttributeType: S
        KeySchema:
          - AttributeName: officeId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    OfficeMembershipsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.officeMembershipsTableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    OfficeBookingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.officeBookingsTableName}
        AttributeDefinitions:
          - AttributeName: officeId
            AttributeType: S
          - AttributeName: bookingId
            AttributeType: S
        KeySchema:
          - AttributeName: officeId
            KeyType: HASH
          - AttributeName: bookingId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    OfficeBookingsAttendeesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.officeBookingsAttendeesTableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    OfficesS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.officesS3BucketName}
        VersioningConfiguration:
          Status: Enabled
        LifecycleConfiguration:
          Rules:
            - Status: Enabled
              ExpirationInDays: 365

functions:
  register:
    handler: src/handlers/auth/register.handler
    events:
      - httpApi:
          path: /register
          method: post
  login:
    handler: src/handlers/auth/login.handler
    events:
      - httpApi:
          path: /login
          method: post
  verify-email:
    handler: src/handlers/auth/verifyEmail.handler
    events:
      - httpApi:
          path: /verifyEmail
          method: post
  create-office:
    handler: src/handlers/office/createOffice.handler
    events:
      - httpApi:
          path: /createOffice
          method: post
